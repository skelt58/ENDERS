<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.enders.ums.ems.sys.dao.SystemMapper">

	<!-- #############################################################  부서 데이터 처리  ############################################################# -->
	<!-- 부서 목록 조회 -->
	<select id="getDeptList" parameterType="deptVO" resultType="deptVO">
		SELECT *
		  FROM 	(
				SELECT A.DEPT_NO
					 , A.DEPT_NM
					 , A.DEPT_DESC
					 , A.STATUS
					 , A.REG_ID
					 , A.REG_DT
					 , B.CD_NM STATUS_NM
					 , ROW_NUMBER() OVER (ORDER BY A.DEPT_NO DESC) SEQ
					 , COUNT(1) OVER() TOTAL_COUNT
				  FROM NEO_DEPT A,
						(SELECT CD, CD_NM
						   FROM NEO_CD
						  WHERE CD_GRP = 'C009'
						    AND USE_YN = 'Y'
						    AND UILANG = #{uilang}) B
				 WHERE A.STATUS = B.CD
				<if test="searchDeptNm != null and searchDeptNm != ''">
				   AND A.DEPT_NM LIKE '%' || #{searchDeptNm} || '%'
				</if>
				<if test="searchStatus != null and searchStatus != ''">
				   AND A.STATUS = #{searchStatus}
				</if>
				)
		 WHERE SEQ BETWEEN (#{page}-1)*#{rows}+1 AND #{page}*#{rows}
	</select>
	
	<!-- 부서 정보 조회 -->
	<select id="getDeptInfo" parameterType="deptVO" resultType="deptVO">
		SELECT DEPT_NO
			 , DEPT_NM
			 , DEPT_DESC
			 , STATUS
			 , REG_ID
			 , REG_DT
			 , UP_ID
			 , UP_DT
		  FROM NEO_DEPT
		 WHERE DEPT_NO = #{deptNo}
	</select>
	
	
	<!-- 부서 정보 등록 -->
	<insert id="insertDeptInfo" parameterType="deptVO">
		INSERT INTO NEO_DEPT
		(
			  DEPT_NO
			, DEPT_NM
			, DEPT_DESC
			, STATUS
			, REG_ID
			, REG_DT
		)
		VALUES
		(
			  NEO_DEPT_SEQ.NEXTVAL
			, #{deptNm}
			, #{deptDesc}
			, #{status}
			, #{regId}
			, #{regDt}
		)
	</insert>
	
	<!-- 부서 정보 수정 -->
	<update id="updateDeptInfo" parameterType="deptVO">
		UPDATE NEO_DEPT
		   SET DEPT_NM   = #{deptNm}
			 , DEPT_DESC = #{deptDesc}
			 , STATUS    = #{status}
			 , UP_ID     = #{upId}
			 , UP_DT     = #{upDt}
		WHERE DEPT_NO    = #{deptNo}
	</update>
	
	
	
	
	
	
	
		
	<!-- #############################################################  사용자 데이터 처리  ############################################################# -->
	<!-- 사용자 목록 조회 -->
	<select id="getUserList" parameterType="deptVO" resultType="userVO">
		SELECT *
		  FROM (
				SELECT A.USER_ID
					 , A.DEPT_NO
					 , A.USER_NM
					 , A.USER_EM
					 , A.USER_TEL
					 , A.STATUS
					 , A.MAIL_FROM_NM
					 , A.MAIL_FROM_EM
					 , A.REPLY_TO_EM
					 , A.RETURN_EM
					 , A.CHARSET
					 , A.TZ_CD
					 , A.UILANG
					 , A.REG_ID
					 , A.REG_DT
					 , A.UP_ID
					 , A.UP_DT
					 , B.DEPT_NM
					 , C.TZ_NM
					 , D.CD_NM STATUS_NM
					 , E.CD_NM CHARSET_NM
					 , F.CD_NM UILANG_NM
					 , ROW_NUMBER() OVER (ORDER BY A.USER_ID) SEQ
					 , COUNT(1) OVER() TOTAL_COUNT
				  FROM NEO_USER A
				  	 , NEO_DEPT B
				  	 , NEO_TIMEZONE C
				  	 , (
				  	 	SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C010'
						   AND USE_YN = 'Y'
						  AND UILANG = #{uilang}) D
					 , (
					 	SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C022'
						   AND USE_YN = 'Y'
						  AND UILANG = #{uilang}) E
					 , (
						SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C025'
						   AND USE_YN = 'Y'
						   AND UILANG = #{uilang}) F
				 WHERE A.DEPT_NO = B.DEPT_NO
				   AND A.TZ_CD = C.TZ_CD
				   AND A.STATUS = D.CD
				   AND A.CHARSET = E.CD
				   AND A.UILANG = F.CD
				   AND A.DEPT_NO = #{deptNo}
			)
		 WHERE SEQ BETWEEN (#{page}-1)*#{rows}+1 AND #{page}*#{rows}
	</select>
	
	<!-- 사용자 정보 조회 -->
	<select id="getUserInfo" parameterType="userVO" resultType="userVO">
		SELECT A.USER_ID
			 , A.DEPT_NO
			 , A.USER_NM
			 , A.USER_PWD
			 , A.USER_EM
			 , A.USER_TEL
			 , A.USER_DESC
			 , A.STATUS
			 , A.MAIL_FROM_NM
			 , A.MAIL_FROM_EM
			 , A.REPLY_TO_EM
			 , A.RETURN_EM
			 , A.CHARSET
			 , A.TZ_CD
			 , A.UILANG
			 , A.REG_ID
			 , A.REG_DT
			 , A.UP_ID
			 , A.UP_DT
			 , B.DEPT_NM
			 , C.TZ_NM
			 , D.CD_NM STATUS_NM
			 , E.CD_NM CHARSET_NM
			 , F.CD_NM UILANG_NM
		  FROM NEO_USER A
			 , NEO_DEPT B
			 , NEO_TIMEZONE C
			 , (
				SELECT CD, CD_NM
				  FROM NEO_CD
				 WHERE CD_GRP = 'C010'
				   AND USE_YN = 'Y'
				   AND UILANG = #{uilang}) D
			 , (
				SELECT CD, CD_NM
				  FROM NEO_CD
				 WHERE CD_GRP = 'C022'
				   AND USE_YN = 'Y'
				   AND UILANG = #{uilang}) E
			 , (
				SELECT CD, CD_NM
				  FROM NEO_CD
				 WHERE CD_GRP = 'C025'
				   AND USE_YN = 'Y'
				   AND UILANG = #{uilang}) F
		 WHERE A.USER_ID = #{userId}
		   AND A.DEPT_NO = B.DEPT_NO
		   AND A.TZ_CD = C.TZ_CD
		   AND A.STATUS = D.CD
		   AND A.CHARSET = E.CD
		   AND A.UILANG = F.CD
	</select>
	
	<!-- 사용자 프로그램 정보 조회 -->
	<select id="getUserProgList" parameterType="userVO" resultType="userProgVO">
		SELECT B.PROG_ID, A.PROG_NM
		  FROM NEO_PROG A
			 , NEO_USER_PROG B
		 WHERE A.PROG_ID = B.PROG_ID
		   AND A.USE_YN = 'Y'
		   AND B.USER_ID = #{userId}
	</select>
	
	<!-- 사용자 아이디를 체크한다. 중복 방지용 -->
	<select id="userIdCheck" parameterType="string" resultType="userVO">
		SELECT USER_ID
		FROM NEO_USER
		WHERE USER_ID = #{userId}
	</select>
	
	<!-- 사용자 정보 등록 -->
	<insert id="insertUserInfo" parameterType="userVO">
		INSERT INTO NEO_USER 
		(
			USER_ID
		  , DEPT_NO
		  , USER_NM
		  , USER_PWD
		  , USER_EM
		  , USER_TEL
		  , USER_DESC
		  , STATUS
		  , MAIL_FROM_NM
		  , MAIL_FROM_EM
		  , REPLY_TO_EM
		  , RETURN_EM
		  , CHARSET
		  , TZ_CD
		  , UILANG
		  , REG_ID
		  , REG_DT
		)
		VALUES
		(
			#{userId}
		  , #{deptNo}
		  , #{userNm}
		  , #{userPwd}
		  , #{userEm}
		  , #{userTel}
		  , #{userDesc}
		  , #{status}
		  , #{mailFromNm}
		  , #{mailFromEm}
		  , #{replyToEm}
		  , #{returnEm}
		  , #{charset}
		  , #{tzCd}
		  , #{uilang}
		  , #{regId}
		  , #{regDt}
		)
	</insert>
	
	<!-- 사용자 프로그램 정보 등록 -->
	<insert id="insertUserProgInfo" parameterType="userProgVO">
		INSERT INTO NEO_USER_PROG
			(USER_ID,PROG_ID)
		VALUES
			(#{userId}, #{progId})
	</insert>
	
	<!-- 사용자 정보 수정 -->
	<update id="updateUserInfo" parameterType="userVO">
		UPDATE NEO_USER
		   SET
			   DEPT_NO      = #{deptNo}
			 , USER_NM      = #{userNm}
			 <if test="userPwd != null and userPwd != ''">
			 , USER_PWD     = #{userPwd}
			 </if>
			 , USER_EM      = #{userEm}
			 , USER_TEL     = #{userTel}
			 , USER_DESC    = #{userDesc}
			 , STATUS       = #{status}
			 , MAIL_FROM_NM = #{mailFromNm}
			 , MAIL_FROM_EM = #{mailFromEm}
			 , RETURN_EM    = #{returnEm}
			 , REPLY_TO_EM  = #{replyToEm}
			 , CHARSET      = #{charset}
			 , TZ_CD        = #{tzCd}
			 , UILANG       = #{uilang}
			 , UP_ID        = #{upId}
			 , UP_DT        = #{upDt}
		 WHERE USER_ID      = #{userId}
	</update>
	
	<!-- 사용자 프로그램 정보 삭제 -->
	<delete id="deleteUserProgInfo" parameterType="string">
		DELETE FROM NEO_USER_PROG
		 WHERE USER_ID = #{userId}
	</delete>
	
	
	<!-- #############################################################  DB Connection 데이터 처리  ############################################################# -->
	<!-- DB Conntion 목록 조회 -->
	<select id="getDbConnList" parameterType="dbConnVO" resultType="dbConnVO">
		SELECT *
		  FROM (
				SELECT A.DB_CONN_NO
		 			 , A.DB_CONN_NM
		 			 , A.DB_TY
		 			 , A.DB_DRIVER
		 			 , A.DB_URL
		 			 , A.DB_CHAR_SET
		 			 , A.LOGIN_ID
		 			 , A.STATUS
		 			 , A.REG_ID
		 			 , A.REG_DT
		 			 , A.UP_ID
		 			 , A.UP_DT
		 			 , B.CD_NM DB_TY_NM
		 			 , C.CD_NM DB_CHAR_SET_NM
		 			 , D.CD_NM STATUS_NM
					 , ROW_NUMBER() OVER (ORDER BY A.DB_CONN_NO) SEQ
					 , COUNT(1) OVER() TOTAL_COUNT
				  FROM NEO_DBCONN A
					 , (
						SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C033'
						   AND UILANG = #{uilang}
						   AND USE_YN = 'Y'
						) B
					 , (
						SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C032'
						   AND UILANG = #{uilang}
						   AND USE_YN = 'Y'
						) C
					 , (
						SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C011'
						   AND UILANG = #{uilang}
						   AND USE_YN = 'Y'
						) D
				 WHERE A.DB_TY = B.CD
				   AND A.DB_CHAR_SET = C.CD
				   AND A.STATUS = D.CD
				   <if test="searchDbConnNm != null and searchDbConnNm != ''">
				   AND A.DB_CONN_NM LIKE '%' || #{searchDbConnNm} || '%'
				   </if>
				   <if test="searchDbTy != null and searchDbTy != ''">
				   AND A.DB_TY = #{searchDbTy}
				   </if>
				   <if test="searchStatus != null and searchStatus != ''">
				   AND A.STATUS = #{searchStatus}
				   </if>
			   )
		 WHERE SEQ BETWEEN (#{page}-1)*#{rows}+1 AND #{page}*#{rows}
	</select>
	
	<!-- DB Conntion 정보 조회 -->
	<select id="getDbConnInfo" parameterType="dbConnVO" resultType="dbConnVO">
		SELECT A.DB_CONN_NO
			 , A.DB_CONN_NM
			 , A.DB_TY
			 , A.DB_DRIVER
			 , A.DB_URL
			 , A.DB_CHAR_SET
			 , A.LOGIN_ID
			 , A.LOGIN_PWD
			 , A.DB_CONN_DESC
			 , A.STATUS
			 , A.REG_ID
			 , A.REG_DT
			 , A.UP_ID
			 , A.UP_DT
			 , B.CD_NM DB_TY_NM
			 , C.CD_NM DB_CHAR_SET_NM
			 , D.CD_NM STATUS_NM
		  FROM NEO_DBCONN A
			 , (
				SELECT CD, CD_NM
				  FROM NEO_CD
				 WHERE CD_GRP = 'C033'
				   AND UILANG = #{uilang}
				   AND USE_YN = 'Y') B
			 , (
				SELECT CD, CD_NM
				  FROM NEO_CD
				 WHERE CD_GRP = 'C032'
				   AND UILANG = #{uilang}
				   AND USE_YN = 'Y') C
			 , (
				SELECT CD, CD_NM
				  FROM NEO_CD
				 WHERE CD_GRP = 'C011'
				   AND UILANG = #{uilang}
				   AND USE_YN = 'Y') D
		 WHERE A.DB_CONN_NO = #{dbConnNo}
		   AND A.DB_TY = B.CD
		   AND A.DB_CHAR_SET = C.CD
		   AND A.STATUS = D.CD
	</select>
	
	<!-- DB Conntion 정보 등록 -->
	<insert id="insertDbConnInfo" parameterType="dbConnVO">
		INSERT INTO NEO_DBCONN
		(
			  DB_CONN_NO
			, DB_CONN_NM
			, DB_TY
			, DB_DRIVER
			, DB_URL
			, DB_CHAR_SET
			, LOGIN_ID
			, LOGIN_PWD
			, DB_CONN_DESC
			, STATUS
			, REG_ID
			, REG_DT
		)
		VALUES
		(
			  NEO_DBCONN_SEQ.NEXTVAL
			, #{dbConnNm}
			, #{dbTy}
			, #{dbDriver}
			, #{dbUrl}
			, #{dbCharSet}
			, #{loginId}
			, #{loginPwd}
			, #{dbConnDesc}
			, #{status}
			, #{regId}
			, #{regDt}
		)
	</insert>
	
	<!-- DB Conntion 정보 수정 -->
	<update id="updateDbConnInfo" parameterType="dbConnVO">
		UPDATE NEO_DBCONN
		   SET
			   DB_CONN_NM   = #{dbConnNm}
			 , DB_TY        = #{dbTy}
			 , DB_DRIVER    = #{dbDriver}
			 , DB_URL       = #{dbUrl}
			 , DB_CHAR_SET  = #{dbCharSet}
			 , LOGIN_ID     = #{loginId}
			 , LOGIN_PWD    = #{loginPwd}
			 , DB_CONN_DESC = #{dbConnDesc}
			 , STATUS       = #{status}
			 , UP_ID        = #{upId}
			 , UP_DT        = #{upDt}
		 WHERE DB_CONN_NO   = #{dbConnNo}
	</update>
	
	<!-- DB Connection 사용권한 목록 조회 -->
	<select id="getDbConnPermList" parameterType="dbConnPermVO" resultType="dbConnPermVO">
		SELECT A.USER_ID
			 , B.DEPT_NM
			 , A.DEPT_NO
			 , (
				CASE WHEN (
							SELECT DISTINCT 'Y'
							  FROM NEO_DBCONN_PERM
							 WHERE DB_CONN_NO = #{dbConnNo}
							   AND USER_ID = A.USER_ID
							) IS NULL
					 THEN 'N' ELSE 'Y' END) PERM_YN
		  FROM NEO_USER A
			 , NEO_DEPT B
		 WHERE B.STATUS = '000'
		   AND A.DEPT_NO = B.DEPT_NO
		 ORDER BY B.DEPT_NM, A.USER_ID
	</select>
	
	<!-- DB Connection 사용권한 정보 삭제 -->
	<delete id="deleteDbConnPermInfo" parameterType="dbConnPermVO">
		DELETE FROM NEO_DBCONN_PERM
		 WHERE DB_CONN_NO = #{dbConnNo}
	</delete>
	
	<!-- DB Connection 사용권한 정보 등록 -->
	<insert id="insertDbConnPermInfo" parameterType="dbConnPermVO">
		INSERT INTO NEO_DBCONN_PERM
		(
			  DB_CONN_NO
			, USER_ID
		)
		VALUES
		(
			  #{dbConnNo}
			, #{userId}
		)
	</insert>




	<!-- #############################################################  메타 테이블 데이터 처리  ############################################################# -->
	<!-- 메타 테이블 목록 조회 -->
	<select id="getMetaTableList" parameterType="dbConnVO" resultType="metaTableVO">
		SELECT TBL_NO
			 , DB_CONN_NO
			 , TBL_NM
			 , TBL_DESC
			 , TBL_ALIAS
		  FROM NEO_METATABLE
		 WHERE DB_CONN_NO = #{dbConnNo}
		 ORDER BY TBL_NM
	</select>
	
	<!-- 메타 테이블 정보 등록 -->
	<insert id="insertMetaTableInfo" parameterType="metaTableVO">
		INSERT INTO NEO_METATABLE
		(
			  TBL_NO
			, DB_CONN_NO
			, TBL_NM
			, TBL_DESC
			, TBL_ALIAS
		)
		VALUES
		(
			  NEO_METATABLE_SEQ.NEXTVAL
			, #{dbConnNo}
			, #{tblNm}
			, #{tblDesc}
			, #{tblAlias}
		)
	</insert>
	
	<!-- 등록시 입력된 메타 테이블 번호 조회 -->
	<select id="getMetaTableSeq" resultType="_int">
		SELECT NEO_METATABLE_SEQ.CURRVAL SEQ FROM DUAL
	</select>
	
	<!-- 메타 테이블 정보 조회 -->
	<select id="getMetaTableInfo" parameterType="metaTableVO" resultType="metaTableVO">
		SELECT DB_CONN_NO
			 , TBL_NM
			 , TBL_DESC
			 , TBL_ALIAS
		  FROM NEO_METATABLE
		 WHERE TBL_NO = #{tblNo}
	</select>
	
	<!-- 메타 테이블 정보 수정 -->
	<update id="updateMetaTableInfo" parameterType="metaTableVO">
		UPDATE NEO_METATABLE
		   SET
			   TBL_NM    = #{tblNm}
			 , TBL_ALIAS = #{tblAlias}
			 , TBL_DESC  = #{tblDesc}
		 WHERE TBL_NO    = #{tblNo}
	</update>
	
	<!-- 메타 테이블 삭제 : 관계식 삭제 -> 관계값 삭제 -> 메타컬럼 삭제 -> 메타테이블 삭제 -->
	<delete id="deleteMetaTableOperator" parameterType="metaTableVO">
		DELETE FROM NEO_OPERATOR
		 WHERE COL_NO IN (
		 					SELECT COL_NO
							  FROM NEO_METACOLUMN
							 WHERE TBL_NO = #{tblNo}
						)
	</delete>
	<delete id="deleteMetaTableValue" parameterType="metaTableVO">
		DELETE FROM NEO_VALUE
		 WHERE COL_NO IN (
		 					SELECT COL_NO
							  FROM NEO_METACOLUMN
							 WHERE TBL_NO = #{tblNo}
						)
	</delete>
	<delete id="deleteMetaTableColumn" parameterType="metaTableVO">
		DELETE FROM NEO_METACOLUMN
		 WHERE TBL_NO = #{tblNo}
	</delete>
	<delete id="deleteMetaTableInfo" parameterType="metaTableVO">
		DELETE FROM NEO_METATABLE
		 WHERE TBL_NO = #{tblNo}
	</delete>
	






	<!-- #############################################################  메타 컬럼 데이터 처리  ############################################################# -->
	<!-- 메타 컬럼 목록 조회 -->
	<select id="getMetaColumnList" parameterType="_int" resultType="metaColumnVO">
		SELECT COL_NO
			 , TBL_NO
			 , COL_NM
			 , COL_DATA_TY
			 , COL_DATA_TY_JDBC
			 , COL_DESC
			 , COL_ALIAS
		  FROM NEO_METACOLUMN
		 WHERE TBL_NO = #{tblNo}
		 ORDER BY COL_NM
	</select>
	
	<!-- 메타 컬럼 정보 등록 -->
	<insert id="insertMetaColumnInfo" parameterType="metaColumnVO">
		INSERT INTO NEO_METACOLUMN
		(
			  COL_NO
			, TBL_NO
			, COL_NM
			, COL_DATA_TY
			, COL_DATA_TY_JDBC
			, COL_DESC
			, COL_ALIAS
		)
		VALUES
		(
			  NEO_METACOLUMN_SEQ.NEXTVAL
			, #{tblNo}
			, #{colNm}
			, #{colDataTy}
			, #{colDataTyJdbc}
			, #{colDesc}
			, #{colAlias}
		)
	</insert>
	
	<!-- 메타 컬럼 정보 등록 -->
	<update id="updateMetaColumnInfo" parameterType="metaColumnVO">
		UPDATE NEO_METACOLUMN
		   SET COL_ALIAS = #{colAlias}
			 , COL_DESC = #{colDesc}
		 WHERE COL_NO = #{colNo}
	</update>
	
	<!-- 메타 컬럼 삭제 : 관계식 삭제 -> 관계값 삭제 -> 메타컬럼 삭제 -->
	<delete id="deleteMetaColumnOperator" parameterType="_int">
		DELETE FROM NEO_OPERATOR
		 WHERE COL_NO = #{colNo}
	</delete>
	<delete id="deleteMetaColumnValue" parameterType="_int">
		DELETE FROM NEO_VALUE
		 WHERE COL_NO = #{colNo}
	</delete>
	<delete id="deleteMetaColumnInfo" parameterType="_int">
		DELETE FROM NEO_METACOLUMN
			WHERE COL_NO = #{colNo}
	</delete>
	




	<!-- #############################################################  메타 관계식 데이터 처리  ############################################################# -->
	<!-- 메타 관계식 정보 조회 -->
	<select id="getMetaOperatorList" parameterType="metaOperatorVO" resultType="metaOperatorVO">
		SELECT A.OPER_NO
			 , A.COL_NO
			 , A.OPER_CD
			 , B.CD_NM OPER_NM
			 , B.CD_DTL
			 , B.CD_DTL OPER_ALIAS
		  FROM NEO_OPERATOR A
			 , (
				SELECT CD, CD_NM, CD_DTL
				  FROM NEO_CD
				 WHERE CD_GRP = 'C037'
				   AND UILANG = #{uilang}
				   AND USE_YN = 'Y'
				) B
		 WHERE A.COL_NO = #{colNo}
		   AND A.OPER_CD = B.CD
		 ORDER BY OPER_NO
	</select>
	
	<!-- 메타 관계식 정보 등록 -->
	<insert id="insertMetaOperatorInfo" parameterType="metaOperatorVO">
		INSERT INTO NEO_OPERATOR
		(
			  OPER_NO
			, COL_NO
			, OPER_CD
		)
		VALUES
		(
			  NEO_OPERATOR_SEQ.NEXTVAL
			, #{colNo}
			, #{operCd}
		)
	</insert>
	





	<!-- #############################################################  메타 관계값 데이터 처리  ############################################################# -->
	<!-- 메타 관계값 록록 조회 -->
	<select id="getMetaValueList" parameterType="metaValueVO" resultType="metaValueVO">
		SELECT VALUE_NO
			 , COL_NO
			 , VALUE_NM
			 , VALUE_ALIAS
		  FROM NEO_VALUE
		 WHERE COL_NO = #{colNo}
		 ORDER BY VALUE_NO
	</select>
	
	<!-- 메타 관계값 정보 등록 -->
	<insert id="insertMetaValueInfo" parameterType="metaValueVO">
		INSERT INTO NEO_VALUE
		(
			  VALUE_NO
			, COL_NO
			, VALUE_NM
			, VALUE_ALIAS
		)
		VALUES
		(
			  NEO_VALUE_SEQ.NEXTVAL
			, #{colNo}
			, #{valueNm}
			, #{valueAlias}
		)
	</insert>
	
	<!-- 메타 관계값 정보 수정 -->
	<update id="updateMetaValueInfo" parameterType="metaValueVO">
		UPDATE NEO_VALUE
		   SET VALUE_NM    = #{valueNm}
			 , VALUE_ALIAS = #{valueAlias}
		 WHERE VALUE_NO    = #{valueNo}
	</update>
	
	<!-- 메타 관계값 정보 삭제 -->
	<delete id="deleteMetaValueInfo" parameterType="metaValueVO">
		DELETE FROM NEO_VALUE
		 WHERE VALUE_NO = #{valueNo}
	</delete>
	






	<!-- #############################################################  메타 관계값 데이터 처리  ############################################################# -->
	<!-- 메타 조인 목록 조회 -->
	<select id="getMetaJoinList" parameterType="metaJoinVO" resultType="metaJoinVO">
		SELECT *
		  FROM (
				SELECT A.JOIN_NO
					 , A.DB_CONN_NO
					 , A.MST_TBL_NM
					 , A.MST_COL_NM
					 , A.FOR_TBL_NM
					 , A.FOR_COL_NM
					 , A.JOIN_TY
					 , A.REL_TY
					 , B.CD_NM JOIN_TY_NM
					 , C.CD_NM REL_TY_NM
					 , ROW_NUMBER() OVER (ORDER BY A.MST_TBL_NM, A.MST_COL_NM, A.FOR_TBL_NM, A.FOR_COL_NM) SEQ
					 , COUNT(1) OVER() TOTAL_COUNT
				  FROM NEO_METAJOIN A
					 , (
						SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C040'
						   AND UILANG = #{uilang}
						   AND USE_YN = 'Y'
						) B
					 , (
						SELECT CD, CD_NM
						  FROM NEO_CD
						 WHERE CD_GRP = 'C041'
						   AND UILANG = #{uilang}
						   AND USE_YN = 'Y'
						) C
				 WHERE A.DB_CONN_NO = #{dbConnNo}
				   AND A.JOIN_TY = B.CD
				   AND A.REL_TY = C.CD
			   )
		 WHERE SEQ BETWEEN (#{page}-1)*#{rows}+1 AND #{page}*#{rows}
	</select>
	
	<!-- 메타 조인 정보 등록 -->
	<insert id="insertMetaJoinInfo" parameterType="metaJoinVO">
		INSERT INTO NEO_METAJOIN
		(
			  JOIN_NO
			, DB_CONN_NO
			, MST_TBL_NM
			, MST_COL_NM
			, FOR_TBL_NM
			, FOR_COL_NM
			, JOIN_TY
			, REL_TY
		)
		VALUES
		(
			  NEO_METAJOIN_SEQ.NEXTVAL
			, #{dbConnNo}
			, #{mstTblNm}
			, #{mstColNm}
			, #{forTblNm}
			, #{forColNm}
			, #{joinTy}
			, #{relTy}
		)
	</insert>
	
	<!-- 메타 조인 정보 수정 -->
	<update id="updateMetaJoinInfo" parameterType="metaJoinVO">
		UPDATE NEO_METAJOIN
		   SET
			   JOIN_TY  = #{joinTy}
			 , REL_TY   = #{relTy}
		 WHERE JOIN_NO  = #{joinNo}
	</update>
	
	<!-- 메타 조인 정보 삭제 -->
	<delete id="deleteMetaJoinInfo" parameterType="metaJoinVO">
		DELETE FROM NEO_METAJOIN
		 WHERE JOIN_NO = #{joinNo}
	</delete>
	
	
	

	
	
	<!-- #############################################################  사용자 로그인 관리  ############################################################# -->
	<!-- 사용자 로그인 이력 조회 -->
	<select id="getLoginHistList" parameterType="loginHistVO" resultType="loginHistVO">
		SELECT *
		  FROM (
				SELECT B.DEPT_NO
					 , A.DEPT_NM
					 , B.USER_ID
					 , B.LGN_HST_ID
					 , B.LGN_DT
					 , B.LGN_IP
					 , ROW_NUMBER() OVER (ORDER BY LGN_DT DESC) SEQ
					 , COUNT(1) OVER() TOTAL_COUNT
				  FROM NEO_DEPT A
					 , NEO_LGN_HST B
				 WHERE A.DEPT_NO = B.DEPT_NO
				   AND LGN_DT &gt;= #{searchLgnStdDt}
				   AND LGN_DT &lt;= #{searchLgnEndDt}
				   <if test="searchDeptNm != null and searchDeptNm != ''">
				   AND A.DEPT_NM LIKE '%' || #{searchDeptNm} || '%'
				   </if>
				   <if test="searchUserId != null and searchUserId != ''">
				   AND B.USER_ID LIKE '%' || #{searchUserId} || '%'
				   </if>
			   )
		 WHERE SEQ BETWEEN (#{page}-1)*#{rows}+1 AND #{page}*#{rows}
	</select>





	<!-- #############################################################  캠페인 목적(사용자 코드) 관리  ############################################################# -->
	<!-- 캠페인목적 목록 조회  -->
	<select id="getUserCodeList" parameterType="userCodeVO" resultType="userCodeVO">
		SELECT A.UILANG
			 , A.CD_GRP
			 , A.CD
			 , A.CD_NM
			 , A.CD_DTL
			 , A.USE_YN
			 , B.CD_NM UILANG_NM
		  FROM NEO_CD A
			 , (
				SELECT CD, CD_NM
				  FROM NEO_CD
				 WHERE UILANG = #{uilang}
				   AND CD_GRP = 'C025'
				   AND USE_YN = 'Y') B
		 WHERE A.CD_GRP = #{cdGrp}
		   AND A.UILANG = B.CD
		 ORDER BY A.UILANG, A.CD
	</select>
	
	<insert id="insertUserCodeInfo" parameterType="userCodeVO">
		INSERT INTO NEO_CD
		(
			  UILANG
			, CD_GRP
			, CD
			, CD_NM
			, USE_YN
			, CD_DTL
		)
		VALUES
		(
			  #{uilang}
			, #{cdGrp}
			, #{cd}
			, #{cdNm}
			, #{useYn}
			, #{cdDtl}
		)
	</insert>
	
	<update id="updateUserCodeInfo" parameterType="userCodeVO">
		UPDATE NEO_CD
		   SET
			   CD_NM   = #{cdNm}
			 , USE_YN  = #{useYn}
			 , CD_DTL  = #{cdDtl}
		 WHERE UILANG  = #{uilang}
		   AND CD_GRP  = #{cdGrp}
		   AND CD      = #{cd}
	</update>
	
	<delete id="deleteUserCodeInfo" parameterType="userCodeVO">
		DELETE FROM NEO_CD
		 WHERE CD_GRP = #{cdGrp}
		   AND CD     = #{cd}
	</delete>
	
</mapper>